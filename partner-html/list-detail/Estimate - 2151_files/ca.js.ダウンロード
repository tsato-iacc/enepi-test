

var ca_url = "https://ca.iacc.tokyo/api/ca/v2/ca.php";

//
var ca_s_date = new Date();
var ca_max_y = 0;

var caleave_cnt = 0;
var caleave_interval = 20000;


function capv(){

	$.ajax({
		  url: ca_url,
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "pv",
			  "ref" : document.referrer,
			  "myref" : window.location.href
			  }

		})
		.done(function(data, textStatus, jqXHR){


			$.ajax({
				  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
				  type: 'POST',
				  cache: false,
				  dataType: 'jsonp',
				  data: {
					  "type" : "leave_n",
					  "val" : "0" + "_" + "1_1_1_1",
					  "myref" : window.location.href
					  }
				})
				.done(function(data, textStatus, jqXHR){
				})
				.fail(function(jqXHR, textStatus, errorThrown){
				})
				.always(function(data, textStatus, jqXHR){
			});



			$(window).on("beforeunload", function() {
				caleave();
			});


			$(window).scroll(function(){
				zy = $(document).scrollTop();
				if(ca_max_y < zy){
					ca_max_y = zy;
				}
			});


			ca_max_y = $(document).scrollTop();

			//caleave_n();
			setTimeout(caleave_n, caleave_interval);

		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});


}



function cacv(event, val){

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "cv",
			  "event" : event,
			  "ref" : document.referrer,
			  "val" : val,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}



function caevent(event, val){

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "event",
			  "event" : event,
			  "val" : val,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}



function calink(id){

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "link",
			  "id" : id,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}






function caprivate(event, val){

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "private",
			  "event" : event,
			  "val" : val,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}

function cadata(key, val){

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "data",
			  "key" : key,
			  "val" : val,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}


function caleave(){


	var ca_e_date = new Date();
	var t_sa = ca_e_date.getTime() - ca_s_date.getTime();

	var now_y = ca_pos_y();

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "leave",
			  "val" : t_sa + "_" + now_y,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){
		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}



function caleave_n(){


	var ca_e_date = new Date();
	var t_sa = ca_e_date.getTime() - ca_s_date.getTime();

	var now_y = ca_pos_y();

	$.ajax({
		  url: ca_url + "?c=" + Cookies.get('caid', {domain: '.ca.iacc.tokyo'}),
		  type: 'POST',
		  cache: false,
		  dataType: 'jsonp',
		  data: {
			  "type" : "leave_n",
			  "val" : t_sa + "_" + now_y,
			  "myref" : window.location.href
			  }
		})
		.done(function(data, textStatus, jqXHR){

			caleave_cnt++;
			if(caleave_cnt >= 30){
				return;
			}

			setTimeout(caleave_n, caleave_interval);

		})
		.fail(function(jqXHR, textStatus, errorThrown){
		})
		.always(function(data, textStatus, jqXHR){
	});
}



function ca_pos_y(){

	//var ny = $(document).scrollTop();
	var ny = ca_max_y;
	var h = $(document).height();
	var wh = window.innerHeight;
	var per = (((ny + wh) / h) * 100).toFixed(2);

	//alert(ny + wh + "_" + h + "_" + per);

	return ((ny + wh) + "_" + h + "_" + per);
}







/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2006, 2014 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD (Register as an anonymous module)
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS
		module.exports = factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (arguments.length > 1 && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setMilliseconds(t.getMilliseconds() + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {},
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling $.cookie().
			cookies = document.cookie ? document.cookie.split('; ') : [],
			i = 0,
			l = cookies.length;

		for (; i < l; i++) {
			var parts = cookies[i].split('='),
				name = decode(parts.shift()),
				cookie = parts.join('=');

			if (key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));






/*!
 * JavaScript Cookie v2.1.4
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));
